version: 2.1

orbs:
  gradle: circleci/gradle@3.0.0
  slack: circleci/slack@4.12.5
   
executors:
  kotlin-gradle-executor:
    docker:
      - image: cimg/openjdk:21.0
    working_directory: ~/project
    resource_class: large
    environment:
      # Improve build performance in CI
      GRADLE_OPTS_EXTRA: "-Dorg.gradle.parallel=false -Dorg.gradle.caching=true -Dorg.gradle.daemon=false"
      # Disable build scans in CI to avoid network timeouts
      GRADLE_SCAN: "false"

commands:
  gradle-with-cache:
    parameters:
      steps:
        type: steps
    steps:
      - restore_cache:
          name: "Restore Gradle Dependencies (Partial Caching)"
          keys:
            # Primary: Exact match on lock files and gradle version
            - v6-gradle-deps-{{ arch }}-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "gradle/libs.versions.toml" }}-{{ checksum "build.gradle.kts" }}
            # Secondary: Match on lock files only (partial restore)
            - v6-gradle-deps-{{ arch }}-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "gradle/libs.versions.toml" }}-
            # Tertiary: Match on gradle version only (basic restore)
            - v6-gradle-deps-{{ arch }}-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-
            # Fallback: Any gradle cache for this architecture
            - v6-gradle-deps-{{ arch }}-
      - << parameters.steps >>
      - save_cache:
          name: "Save Gradle Dependencies Cache"
          key: v6-gradle-deps-{{ arch }}-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "gradle/libs.versions.toml" }}-{{ checksum "build.gradle.kts" }}
          paths:
            - ~/.gradle/caches
            - ~/.gradle/wrapper
            - .gradle

  send-error:
    parameters:
      message:
        type: string
    steps:
      - run:
          name: Send alerts to slack when something fails
          when: on_fail
          #Clone the repo to be sure that script circleci_pipeline_metadata.sh is always available.
          command: |
            git clone --depth=1 "https://github.com/gperalta-ductworks/viaduct.git" script_metadata
            chmod +x script_metadata/.circleci/scripts/circleci_pipeline_metadata.sh
            ./script_metadata/.circleci/scripts/circleci_pipeline_metadata.sh "<< parameters.message >>"
            exit 0
      - slack/notify:
          event: fail

  setup-gradle:
    steps:
      - run:
          name: Set Gradle permissions
          command: |
            if [ ! -f "./gradlew" ]; then
              echo "‚ùå ERROR: gradlew script not found in $(pwd)"
              ls -la
              exit 1
            fi
            chmod +x ./gradlew
            echo "‚úÖ Gradle wrapper permissions set successfully"

jobs:
  build:
    executor: kotlin-gradle-executor
    steps:
      - checkout

      - setup-gradle

      - run: echo "export MSG_DES=Gradle setup failed" >> $BASH_ENV
      
      # Use Gradle orb for optimal caching
      - gradle-with-cache:
          message: "Dependency download failed"
          steps:
            - run:
                name: Download dependencies
                command: |
                  exit 1 # check slack error message
                  echo "üì• Downloading Gradle dependencies..."
                  ./gradlew dependencies --no-scan || {
                    echo "‚ùå Failed to download dependencies"
                    exit 1
                  }
                  echo "‚úÖ Dependencies downloaded successfully"
                  
      - run: echo "export MSG_DES=Dependency download failed"  >> $BASH_ENV

      - gradle-with-cache:
          steps:
            - run:
                name: Build project (without tests)
                command: |
                  echo "üî® Building project (without tests)..."
                  ./gradlew clean assemble --no-scan || {
                    echo "‚ùå Build failed"
                    exit 1
                  }
                  echo "‚úÖ Project built successfully"
      
      - run: echo "export MSG_DES=Project build failed" >> $BASH_ENV

      - run:
          name: Collect build artifacts
          command: |
            echo "üì¶ Collecting artifacts..."
            rm -rf build/package
            mkdir -p build/package/{primary,sources,javadoc,others}

            # Primary jars (exclude sources/javadoc)
            find . -type f -path "*/build/libs/*.jar" \
              ! -name "*-sources.jar" ! -name "*-javadoc.jar" \
              -exec cp {} build/package/primary/ \; || true

            # Sources & Javadoc jars (if any)
            find . -type f -path "*/build/libs/*-sources.jar" -exec cp {} build/package/sources/ \; || true
            find . -type f -path "*/build/libs/*-javadoc.jar" -exec cp {} build/package/javadoc/ \; || true

            # (Optional) POMs or other publish files
            find . -type f -path "*/build/publications/*/*.pom" -exec cp {} build/package/others/ \; || true

            echo "‚úÖ Collected:"
            find build/package -type f -maxdepth 2 -print

      - store_artifacts:
          path: build/package
          destination: package

      # TODO: Enable Dokka documentation generation
      # Currently disabled due to complex multi-module conflicts and dependency issues
      # - gradle-with-cache:
      #     steps:
      #       - run:
      #           name: Generate Documentation in HTML with Dokka (multi module)
      #           command: |
      #             echo "üìù Generating Dokka documentation..."
      #             ./gradlew dokkaHtmlMultiModule --no-scan --no-configuration-cache || {
      #               echo "‚ùå Dokka documentation generation failed"
      #               exit 1
      #             }
      #             echo "‚úÖ Dokka documentation generated successfully"
      # - send-error:
      #     message: "Dokka documentation generation failed"

      # - run:
      #     name: Dump Dokka problem report
      #     command: |
      #       if [ -f build/reports/problems/problems-report.html ]; then
      #         echo "==== Dokka Problem Report ===="
      #         cat build/reports/problems/problems-report.html | sed -e 's/<[^>]*>//g' | head -n 100
      #       else
      #         echo "No Dokka problem report found."
      #       fi

      # TODO: Re-enable when Dokka is working
      # - store_artifacts:
      #     path: build/dokka
      #     destination: kdoc-html

      - persist_to_workspace:
          root: .
          paths:
            - build
            - .gradle
            - "*/build"
            - build/package

      - send-error:
          message: $MSG_DES

  test:
    executor: kotlin-gradle-executor
    steps:
      - checkout

      # Restore workspace from build job
      - attach_workspace:
          at: ~/project
      - send-error:
          message: "Failed to restore workspace in test job"

      - setup-gradle
      
      - send-error:
          message: "Gradle setup failed in test job"

      - gradle-with-cache:
          steps:
            - run:
                name: Run tests
                command: |
                  echo "üß™ Running tests..."
                  ./gradlew test --no-scan --continue || {
                    echo "‚ö†Ô∏è Some tests failed, but continuing"
                    echo "Test failures are not blocking the pipeline"
                  }
                  echo "‚úÖ Test execution completed"

            - run:
                name: Generate coverage and test reports
                command: |
                  echo "üìä Generating aggregated coverage and test reports..."
                  ./gradlew testAndCoverage --no-scan --no-configuration-cache || {
                    echo "‚ùå Failed to generate reports"
                    exit 1
                  }
                  echo "‚úÖ Reports generated successfully"
                when: always
      - send-error:
          message: "Report generation failed"

      # Store test results for CircleCI UI (JUnit XML files)
      - store_test_results:
          path: build/test-results-for-circleci

      # Store JaCoCo coverage reports (both individual and aggregated)
      - store_artifacts:
          path: build/reports/jacoco
          destination: coverage-reports

      # Store all other reports for debugging
      - store_artifacts:
          path: build/reports
          destination: all-reports

  detekt:
    executor: kotlin-gradle-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - send-error:
          message: "Failed to restore workspace in detekt job"

      - setup-gradle
      
      - send-error:
          message: "Gradle setup failed in detekt job"

      - gradle-with-cache:
          steps:
            - run:
                name: Run Detekt Static Analysis
                command: |
                  echo "üßπ Running Detekt static analysis..."
                  ./gradlew detekt --no-daemon --max-workers=1 || {
                    echo "‚ùå Detekt found code style violations"
                    exit 1
                  }
                  echo "‚úÖ Detekt analysis passed"
      - send-error:
          message: "Detekt static analysis failed"

      - store_artifacts:
          path: build/reports/detekt
          destination: detekt-reports

  ktlint:
    executor: kotlin-gradle-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - send-error:
          message: "Failed to restore workspace in ktlint job"

      - setup-gradle
      
      - send-error:
          message: "Gradle setup failed in ktlint job"

      - gradle-with-cache:
          steps:
            - run:
                name: Run Ktlint Code Formatting Check
                command: |
                  echo "üßπ Running Ktlint code formatting check..."
                  ./gradlew ktlintCheck --no-daemon --max-workers=1 || {
                    echo "‚ùå Ktlint found code formatting violations"
                    exit 1
                  }
                  echo "‚úÖ Ktlint formatting check passed"
      - send-error:
          message: "Ktlint code formatting check failed"

  docs:
    executor: kotlin-gradle-executor
    steps:
      - checkout

      - attach_workspace:
          at: ~/project
      - send-error:
          message: "Failed to restore workspace in docs job"

      - setup-gradle
      - send-error:
          message: "Gradle setup failed in docs job"

      - gradle-with-cache:
          steps:
            - run:
                name: Generate Javadoc
                command: |
                  echo "üìù Generating Javadoc documentation..."
                  ./gradlew javadoc --no-scan || {
                    echo "‚ùå Javadoc generation failed"
                    exit 1
                  }
                  echo "‚úÖ Javadoc generated successfully"
      - send-error:
          message: "Javadoc generation failed"

      - store_artifacts:
          path: build/docs/javadoc
          destination: javadoc

  coverage-verification:
    executor: kotlin-gradle-executor
    steps:
      - checkout


      - attach_workspace:
          at: ~/project
      - send-error:
          message: "Failed to restore workspace in coverage-verification job"

      - setup-gradle
      - send-error:
          message: "Gradle setup failed in coverage-verification job"

      - gradle-with-cache:
          steps:
            - run:
                name: Verify coverage thresholds
                command: |
                  echo "üéØ Verifying coverage thresholds..."
                  # Skip report generation since it was already done in test job
                  ./gradlew testCodeCoverageVerification --no-scan --no-configuration-cache -x testCodeCoverageReport || {
                    echo "‚ùå Coverage thresholds not met"
                    echo "Please check the coverage report and add more tests"
                    exit 1
                  }
                  echo "‚úÖ Coverage thresholds met successfully"
      - send-error:
          message: "Coverage threshold verification failed"

  deploy-docs:
    docker:
      - image: cimg/base:stable
    working_directory: ~/project
    steps:
      - checkout

      - run:
          name: Install Git
          command: |
            echo "üì¶ Installing Git..."
            sudo apt update -y && sudo DEBIAN_FRONTEND=noninteractive apt install -y git || {
              echo "‚ùå Failed to install Git"
              exit 1
            }
            echo "‚úÖ Git installed successfully"
      - send-error:
          message: "Git installation failed"

      - attach_workspace:
          at: ~/project/

      - run:
          name: Verify Dokka documentation exists
          command: |
            echo "üîç Verifying Dokka documentation..."
            set -eo pipefail
            if [ ! -f ".circleci/scripts/check_docs.sh" ]; then
              echo "‚ùå check_docs.sh script not found"
              exit 1
            fi
            chmod +x .circleci/scripts/check_docs.sh
            sh .circleci/scripts/check_docs.sh || {
              echo "‚ùå Documentation verification failed"
              exit 1
            }
            echo "‚úÖ Documentation verification completed"
      - send-error:
          message: "Documentation verification failed"

      - run:
          name: Deploy Dokka HTML to GitHub Pages
          command: |
            echo "üöÄ Deploying documentation to GitHub Pages..."
            set -eo pipefail
            if [ ! -f ".circleci/scripts/deploy_docs.sh" ]; then
              echo "‚ùå deploy_docs.sh script not found"
              exit 1
            fi
            chmod +x .circleci/scripts/deploy_docs.sh
            sh .circleci/scripts/deploy_docs.sh || {
              echo "‚ùå Documentation deployment failed"
              exit 1
            }
            echo "‚úÖ Documentation deployed successfully"
      - send-error:
          message: "Documentation deployment failed"

workflows:
  build-and-test:
    when:
      or:
        - equal: [ main, << pipeline.git.branch >> ]
        - equal: [ master, << pipeline.git.branch >> ]
    jobs:
      - build
      - test:
          requires:
            - build
      - detekt:
          requires:
            - build
      - ktlint:
          requires:
            - build
      - docs:
          requires:
            - build
      - coverage-verification:
          requires:
            - test
      # TODO: Re-enable when Dokka documentation is working
      # - deploy-docs:
      #     requires:
      #       - build

  pull-request:
    when:
      and:
        - not:
            or:
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ master, << pipeline.git.branch >> ]
        - not: << pipeline.git.tag >>
    jobs:
      - build
      - test:
          requires:
            - build
      - detekt:
          requires:
            - build
      - ktlint:
          requires:
            - build
      - docs:
          requires:
            - build
      - coverage-verification:
          requires:
            - test

